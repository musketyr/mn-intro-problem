plugins {
    id "io.spring.dependency-management" version "1.0.6.RELEASE"
    id "com.github.johnrengelman.shadow" version "4.0.2"
    id "jp.classmethod.aws.lambda" version "0.38"
    id "groovy"
    id "application"
}



version "0.1"
group "mn.intro.problem"

repositories {
    mavenCentral()
    maven { url "https://jcenter.bintray.com" }
}

dependencyManagement {
    imports {
        mavenBom 'io.micronaut:micronaut-bom:1.1.3'
    }
}

configurations {
    // for dependencies that are needed for development only
    developmentOnly 
}

dependencies {
    // cusotom
    compile 'com.agorapulse:micronaut-aws-sdk:1.1.2'
    compile "com.amazonaws:aws-java-sdk-dynamodb:1.11.234"

    testCompile "com.agorapulse.testing:fixt:0.1.3"

    testCompile "com.agorapulse:gru:0.8.1"
    testCompile "com.agorapulse:gru-api-gateway:0.8.1"

    testCompile "com.agorapulse:dru-client-dynamodb:0.5.0"
    testCompile "com.agorapulse:dru-parser-json:0.5.0"

    // generated
    compile "io.micronaut:micronaut-runtime-groovy"
    compile "io.micronaut:micronaut-validation"
    compile "io.micronaut:micronaut-function-groovy"
    compile "io.micronaut.aws:micronaut-function-aws-api-proxy"
    compileOnly "io.micronaut:micronaut-inject-groovy"
    developmentOnly "io.micronaut:micronaut-http-server-netty"
    runtime "com.amazonaws:aws-lambda-java-log4j2:1.0.0"
    runtime "org.apache.logging.log4j:log4j-slf4j-impl:2.9.1"
    runtime "org.apache.logging.log4j:log4j-core:2.8.2"
    runtime "org.apache.logging.log4j:log4j-api:2.8.2"
    runtime "org.apache.logging.log4j:log4j-slf4j-impl:2.8.2"
    runtime "com.amazonaws:aws-lambda-java-log4j2:1.1.0"
    testCompile "io.micronaut:micronaut-inject-groovy"
    testCompile("org.spockframework:spock-core") {
        exclude group: "org.codehaus.groovy", module: "groovy-all"
    }
    testCompile "io.micronaut.test:micronaut-test-spock"
    testCompile "io.micronaut:micronaut-function-client"
    testRuntime "io.micronaut:micronaut-http-server-netty"
    testRuntime "io.micronaut:micronaut-function-web"
}

test.classpath += configurations.developmentOnly
shadowJar {
    transform(com.github.jengelman.gradle.plugins.shadow.transformers.Log4j2PluginsCacheFileTransformer)
}
tasks.withType(GroovyCompile) {
    groovyOptions.forkOptions.jvmArgs.add('-Dgroovy.parameters=true')
}

shadowJar {
    mergeServiceFiles()
}

run.classpath += configurations.developmentOnly
run.jvmArgs('-noverify', '-XX:TieredStopAtLevel=1', '-Dcom.sun.management.jmxremote')
mainClassName = "mn.intro.problem.MnIntroProblemFunction"
applicationDefaultJvmArgs = [""]

jar {
    manifest {
        attributes 'Main-Class': mainClassName
    }
}

//task buildZip(type: Zip) {
//    from compileJava
//    from compileGroovy
//    from processResources
//    into('lib') {
//        from configurations.compileClasspath
//    }
//}
//
//build.dependsOn buildZip

task buildZip(type: Zip) {
    from sourceSets.main.output
    into('lib') {
        from configurations.compileClasspath
        from configurations.runtimeClasspath
    }
}
shadowJar.dependsOn buildZip

if(new File("${System.getProperty("user.home")}/.aws/credentials").exists()) {
    task deploy(type: jp.classmethod.aws.gradle.lambda.AWSLambdaMigrateFunctionTask, dependsOn: shadowJar) {
        functionName = "mn-intro-problem"
        handler = "mn.intro.problem.MicronautHandler::handleRequest"
        role = "arn:aws:iam::${aws.accountId}:role/lambda_basic_execution"
        runtime = com.amazonaws.services.lambda.model.Runtime.Java8
        zipFile = buildZip.archivePath
        memorySize = 512
        timeout = 60
    }

}

